- alias: 'Alarm: Trigger alarm when motion is detected'
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.front_door
        - binary_sensor.balcony_door
        - binary_sensor.office_door
        - binary_sensor.living_room_balcony_door
        - binary_sensor.childrens_room_door
        - binary_sensor.motion_livingroom
        - binary_sensor.gang_motion
        - binary_sensor.gang_motion_2
        - binary_sensor.motion_entrance
        - binary_sensor.motion_office
        - binary_sensor.entry
      to: 'on'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: alarm_control_panel.alarm
        state: armed_away
      - condition: template
        value_template: "{{ not is_state('vacuum.vacuum_cleaner', 'cleaning') }}"
  action:
    service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.alarm

- alias: 'Alarm: Trigger alarm when motion is detected'
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.front_door
        - binary_sensor.balcony_door
        - binary_sensor.office_door
        - binary_sensor.living_room_balcony_door
        - binary_sensor.childrens_room_door
      to: 'on'
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: alarm_control_panel.alarm
        state: armed_home
  action:
    service: alarm_control_panel.alarm_trigger
    entity_id: alarm_control_panel.alarm


- alias: 'Alarm: Send notification when alarm triggered'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      to: 'triggered'
  action:
    - service: notify.devices_user_1
      data_template:
        title: 'Alarm'
        message: > 
          Activity was detected by 
          {%- for entity_id in states.group.doors_and_windows.attributes.entity_id if states(entity_id) == 'on' -%}
            {%- if loop.first %} {% endif -%}
            {{state_attr(entity_id, 'friendly_name') }}
            {%- if not loop.last %}, {% endif -%}
          {%- endfor -%}
        data:
          push:
            sound:
              name: default
              critical: 1
              volume: 1.0
            thread-id: "alarm"

# Disarm Alarm

- alias: 'Alarm: Disarm alarm when users are home'
  trigger:
    - platform: state
      entity_id: group.personen
      from: not_home
      to: home
  action:
    - service: script.disable_alarm

- alias: 'Alarm: Disarm phone is removed from charger in the morning'
  trigger:
    - platform: state
      entity_id: sensor.batphone_battery_state
      to: 'Not Charging'
  condition:
    - condition: time
      after: "06:00"
      before: "11:00"
  action:
    - service: script.disable_alarm

- alias: 'Alarm: Send notification when alarm is Disarmed'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      to: 'disarmed'
  action:
    - service: notify.devices_user_1
      data_template:
        title: 'Alarm'
        message: "Alarm is disarmed at {{ states('sensor.date_time') }}"


# Enable Alarm

- alias: 'Alarm: Arm the alarm when users are not home'
  trigger:
    - platform: state
      entity_id: group.personen
      from: home
      to: not_home
  action:
    - service: script.enable_alarm

- alias: 'Alarm: Arm the alarm when users are not home'
  trigger:
    - platform: state
      entity_id: sensor.batphone_battery_state
      to: 'Not Charging'
  condition:
    - condition: time
      after: "20:00"
      before: "05:00"
  action:
    - service: script.enable_alarm

- alias: 'Alarm: Send notification when alarm is Armed in Away mode'
  trigger:
    - platform: state
      entity_id: alarm_control_panel.alarm
      to: 'armed_away'
  action:
    - service: notify.devices_user_1
      data_template:
        title: "Alarm"
        message: "Alarm is armed at {{ states('sensor.date_time') }}"

- alias: "Door: A Door is still open"
  initial_state: "on"
  trigger:
    - platform: state
      entity_id: binary_sensor.front_door
      from: "off"
      to: "on"
  condition:
    condition: state
    entity_id: group.doors
    state: "on"
  action:
    - service: notify.devices_user_1
      data_template:
        title: "Doors"
        message: >
          "Open doors: {% if is_state('binary_sensor.balcony_door', 'on') %}Kitchen, {% endif %} {% if is_state('binary_sensor.living_room_balcony_door', 'on') %}Livingroom, {% endif %}{% if is_state('binary_sensor.office_door', 'on') %}Office, {% endif %}{% if is_state('binary_sensor.childrens_room_door', 'on') %}Child`s room{% endif %}"
    - delay:
        seconds: 20

- alias: "Door: Front Door is still open"
  initial_state: "on"
  trigger:
    - platform: state
      entity_id: binary_sensor.front_door
      from: "off"
      to: "on"
      for:
        minutes: 5
  action:
    - service: notify.devices_user_1
      data_template:
        title: "Door"
        message: "Front Door is still open"

- alias: "Mail: The mailbox was opened"
  initial_state: "on"
  trigger:
    - platform: event
      event_type: xiaomi_aqara.movement
      event_data:
        entity_id: sensor.vibration_action
        movement_type: tilt
    - platform: state
      entity_id: sensor.vibration_action
      to: 'vibration'
    - platform: state
      entity_id: sensor.vibration_action
      to: 'tilt'
  action:
    - service: notify.devices_user_1
      data_template:
        title: "Mailbox"
        message: "Mailbox was opened"
        data:
          push:
            thread-id: "mailbox"
    - delay:
        seconds: 10
